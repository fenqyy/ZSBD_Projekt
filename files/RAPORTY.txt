-- SHOWTIMES SUMMARY --
CREATE TABLE showtimes_summary (
    summary_id      NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    summary_type    VARCHAR2(10),
    summary_period  VARCHAR2(20),
    total_showtimes NUMBER,
    avg_ticket_price FLOAT,
    created_at      TIMESTAMP DEFAULT SYSTIMESTAMP
);
-- MIESIĘCZNY RAPORT --
create or replace PROCEDURE generate_monthly_showtimes_summary(year IN NUMBER, month IN NUMBER) IS
    start_date DATE := TO_DATE(year || '-' || LPAD(month, 2, '0') || '-01', 'YYYY-MM-DD');
    end_date   DATE := LAST_DAY(start_date);
    total_showtimes NUMBER := 0;
    avg_ticket_price FLOAT := 0;
BEGIN
    SELECT COUNT(*), NVL(AVG(ticket_price), 0)
    INTO total_showtimes, avg_ticket_price
    FROM showtimes
    WHERE start_time BETWEEN start_date AND end_date + 1 - INTERVAL '1' SECOND;

    INSERT INTO showtimes_summary (summary_type, summary_period, total_showtimes, avg_ticket_price)
    VALUES ('MONTHLY', TO_CHAR(start_date, 'YYYY-MM'), total_showtimes, avg_ticket_price);

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Wygenerowano podsumowanie miesięczne sprzedanych biletów dla: ' || TO_CHAR(start_date, 'YYYY-MM'));
END;

-- KWARTALNY RAPORT --
create or replace PROCEDURE generate_quarterly_showtimes_summary(year IN NUMBER, quarter IN NUMBER) IS
    start_month NUMBER := (quarter - 1) * 3 + 1;
    start_date  DATE := TO_DATE(year || '-' || LPAD(start_month, 2, '0') || '-01', 'YYYY-MM-DD');
    end_date    DATE := LAST_DAY(ADD_MONTHS(start_date, 2));
    total_showtimes NUMBER := 0;
    avg_ticket_price FLOAT := 0;
BEGIN
    SELECT COUNT(*), NVL(AVG(ticket_price), 0)
    INTO total_showtimes, avg_ticket_price
    FROM showtimes
    WHERE start_time BETWEEN start_date AND end_date + 1 - INTERVAL '1' SECOND;

    INSERT INTO showtimes_summary (summary_type, summary_period, total_showtimes, avg_ticket_price)
    VALUES ('QUARTERLY', year || '-Q' || quarter, total_showtimes, avg_ticket_price);

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Wygenerowano podsumowanie kwartalne sprzedanych biletów dla: ' || year || '-Q' || quarter);
END;

-- ROCZNY RAPORT --
create or replace PROCEDURE generate_yearly_showtimes_summary(year IN NUMBER) IS
    start_date DATE := TO_DATE(year || '-01-01', 'YYYY-MM-DD');
    end_date   DATE := TO_DATE(year || '-12-31', 'YYYY-MM-DD');
    total_showtimes NUMBER := 0;
    avg_ticket_price FLOAT := 0;
BEGIN
    SELECT COUNT(*), NVL(AVG(ticket_price), 0)
    INTO total_showtimes, avg_ticket_price
    FROM showtimes
    WHERE start_time BETWEEN start_date AND end_date + 1 - INTERVAL '1' SECOND;

    INSERT INTO showtimes_summary (summary_type, summary_period, total_showtimes, avg_ticket_price)
    VALUES ('YEARLY', TO_CHAR(start_date, 'YYYY'), total_showtimes, avg_ticket_price);

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Wygenerowano podsumowanie roczne sprzedaży biletów dla: ' || year);
END;

-- RAPORTY TEST --
BEGIN
    generate_monthly_showtimes_summary(2025, 6);
    generate_quarterly_showtimes_summary(2025, 2);
    generate_yearly_showtimes_summary(2025);
END;
